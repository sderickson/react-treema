(self.webpackChunkreact_treema=self.webpackChunkreact_treema||[]).push([[737],{"./src/Treema/tests/filters.story.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{StringFilter:()=>StringFilter,default:()=>filters_story});var utils_storybook=__webpack_require__("./src/Treema/tests/utils-storybook.ts"),esm_extends=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/extends.js"),context=__webpack_require__("./src/Treema/tests/context.ts"),utils=__webpack_require__("./src/Treema/utils.ts"),TreemaRoot=__webpack_require__("./src/Treema/TreemaRoot.tsx"),react=__webpack_require__("./node_modules/react/index.js");const ParentComponent=props=>{const[filter,setFilter]=(0,react.useState)(""),[filterType,setFilterType]=(0,react.useState)("string"),onChange=(0,react.useCallback)((e=>{setFilter(e.target.value)}),[setFilter]);let filterProp;return filterProp="string"===filterType?filter:"regex"===filterType?new RegExp(filter,"i"):ctx=>"string"===ctx.schema.type&&"string"==typeof ctx.data&&ctx.data.includes(filter),react.createElement("div",{"data-testid":"integration-test"},react.createElement("span",null,"Filter: "),react.createElement("input",{onChange,value:filter,"data-testid":"test-filter-input"}),react.createElement("div",null,react.createElement("label",{htmlFor:"filter-type"},"Filter Type: "),react.createElement("select",{id:"filter-type","data-testid":"test-filter-type",onChange:val=>{setFilterType(val.target.value)}},react.createElement("option",{value:"string"},"String (exact match)"),react.createElement("option",{value:"regex"},"Regex (case-insensitive)"),react.createElement("option",{value:"function"},"Function (matches only words, not language)"))),react.createElement(TreemaRoot.W,(0,esm_extends.Z)({},props,{onEvent:context.Vl,filter:filterProp})))},stringFilterProps={schemaLib:(0,utils.cD)(),onEvent:context.Vl,data:{English:["the","be","to","of","and","a","in","that","have","I","it","for","not","on","with","he","as","you","do","at","this","but","his","by","from","they","we","say","her","she","or","an","will","my","one","all","would","there","their","what","so","up","out","if","about","who","get","which","go","me","when","make","can","like","time","no","just","him","know","take","people","into","year","your","good","some","could","them","see","other","than","then","now","look","only","come","its","over","think","also","back","after","use","two","how","our","work","first","well","way","even","new","want","because","any","these","give","day","most","us"],Spanish:["gracias","ser","a","ir","estar","bueno","de","su","hacer","amigo","por","no","en","haber","tener","un","ahora","y","que","por","amar","quién","para","venir","porque","el","antes","más","bien","aquí","querer","hola","tú","poder","gustar","poner","casi","saber","como","donde","dar","pero","se","mucho","nuevo","cuando","chico","entender","si","o","feliz","todo (all, every)","mismo","muy","nunca","yo","sí","grande","deber","usted","bajo","otro","salir","hora","desde","ver","malo","pensar","hasta","tanto","entre","durante","llevar","siempre","empezar","él","leer","cosa","sacar","conocer","primero","andar","sobre","echar","sin","decir","trabajar","nosotros","también","adiós","comer","triste","país","escuchar","hombre","mujer","le","creer","encontrar","beber"]},schema:{title:"Common Words By Language",type:"object",additionalProperties:{name:"Common Words",type:"array",items:{type:"string"}}}};try{ParentComponent.displayName="ParentComponent",ParentComponent.__docgenInfo={description:"",displayName:"ParentComponent",props:{data:{defaultValue:{value:'An "empty" or "falsy" value of whatever type is given in the schema.'},description:"The data to display in the treema. Should conform to the schema given.",name:"data",required:!0,type:{name:"any"}},schema:{defaultValue:{value:"{} (any JSON object allowed)"},description:"The schema to use to validate the data. Treema will use this to determine\nhow to construct the UI, and how the data may be edited\n@see https://json-schema.org/understanding-json-schema/",name:"schema",required:!0,type:{name:"TreemaSupportedJsonSchema"}},schemaLib:{defaultValue:{value:"A noop version - no validation, no error messages"},description:'A schema library instance to use to validate the data.\nThere are [many JavaScript libraries](https://json-schema.org/implementations.html#validators)\nthat support various drafts of the JSON Schema spec.\nWrap your chosen library to match the TypeScript interface "SchemaLib".\nGenerally you should initialize the library, which may provide options\nwhich will affect the behavior of Treema. Treema also depends on this library\nto provide error messages.\n\nSee wrapTv4 and wrapAjv for examples.',name:"schemaLib",required:!1,type:{name:"TreemaWrappedSchemaLib"}},onEvent:{defaultValue:null,description:"A callback for when the user interacts with the treema.\n\nSupported events:\n- `change_select_event`: when the user selects a node. Includes `path` in the event.",name:"onEvent",required:!1,type:{name:"TreemaEventHandler"}},definitions:{defaultValue:{value:"The default definitions, which cover all JSON Schema types and a few advanced examples."},description:'Custom Treema node definitions. Use these to customize how Treema renders data\nof certain types. Treema will first see if there\'s a match for the "format" on the\ndata\'s schema, then will match its "type". If no match is found, Treema will use the\ndefault node definitions, keying off what type the data currently is.\n\nSee [TreemaTypeDefinition](https://github.com/sderickson/react-treema/blob/4923128ed24089d8677b11608cbe9afbfde1c51b/src/Treema/types.ts#L319)\nfor documentation on definitions.',name:"definitions",required:!1,type:{name:"TreemaTypeDefinition[]"}},initOpen:{defaultValue:{value:"All levels are open by default"},description:"The number of levels deep to open the tree by default.",name:"initOpen",required:!1,type:{name:"number"}},filter:{defaultValue:null,description:"Filters what nodes are visible. If a string, filters nodes that do not contain it.\nIf a regex, filters nodes that do not match it. If a function, filters nodes which\nthe function returns false.\n\nIf you are using a function and its behavior changes, be sure to provide a new\nfunction with each change otherwise Treema will not update.",name:"filter",required:!1,type:{name:"TreemaFilter"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Treema/tests/filters.tsx#ParentComponent"]={docgenInfo:ParentComponent.__docgenInfo,name:"ParentComponent",path:"src/Treema/tests/filters.tsx#ParentComponent"})}catch(__react_docgen_typescript_loader_error){}const filters_story={title:"IntegrationTests/Filters",component:ParentComponent,parameters:{docs:{description:{component:"This storybook demonstrates and tests the filter TreemaRoot prop."}}}},StringFilter=(0,utils_storybook.x)({name:"setting a string filter should work",test:async ctx=>{await ctx.type(ctx.query().getByTestId("test-filter-input"),"te"),ctx.expect(ctx.query().queryByText("English:")).toBeTruthy(),ctx.expect(ctx.query().queryByText("after")).toBeTruthy(),ctx.expect(ctx.query().queryByText("hacer")).toBe(null)}},stringFilterProps);StringFilter.parameters={...StringFilter.parameters,docs:{...StringFilter.parameters?.docs,source:{originalSource:"wrapGenericTestInStory(stringFilterTest, stringFilterProps)",...StringFilter.parameters?.docs?.source}}}},"./src/Treema/tests/context.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Vl:()=>onEvent,_v:()=>sleep,g6:()=>TreemaStorybookTestContext});const user=__webpack_require__("./node_modules/@testing-library/user-event/dist/esm/index.js").Z.setup();function sleep(ms){return new Promise((resolve=>setTimeout(resolve,ms)))}let lastPath,lastData;const onEvent=event=>{"change_select_event"===event.type&&(lastPath=event.path),"change_data_event"===event.type&&(lastData=event.data)};class TreemaStorybookTestContext{constructor(root,jest,testingLibrary,speed=200){this.root=void 0,this.treema=void 0,this.testingLibrary=void 0,this.expect=void 0,this.speed=void 0,this.root=root,"treema-root"===this.root.getAttribute("data-testid")?this.treema=this.root:this.treema=testingLibrary.within(this.root).getByTestId("treema-root"),this.testingLibrary=testingLibrary,this.expect=jest.expect,this.speed=speed}query(){return this.testingLibrary.within(this.root)}async fireFocus(e){await this.testingLibrary.fireEvent.focus(e||this.treema),await sleep(this.speed)}async fireArrowDown(){await this.testingLibrary.fireEvent.keyDown(this.treema,{key:"ArrowDown",code:"ArrowDown"}),await sleep(this.speed)}async fireArrowUp(){await this.testingLibrary.fireEvent.keyDown(this.treema,{key:"ArrowUp",code:"ArrowUp"}),await sleep(this.speed)}async fireArrowLeft(){await this.testingLibrary.fireEvent.keyDown(this.treema,{key:"ArrowLeft",code:"ArrowLeft"}),await sleep(this.speed)}async fireArrowRight(){await this.testingLibrary.fireEvent.keyDown(this.treema,{key:"ArrowRight",code:"ArrowRight"}),await sleep(this.speed)}async fireEnter(){await this.testingLibrary.fireEvent.keyDown(this.treema,{key:"Enter",code:"Enter"}),await sleep(this.speed)}async fireTab(){await this.testingLibrary.fireEvent.keyDown(this.treema,{key:"Tab",code:"Tab"}),await sleep(this.speed)}async fireBackspace(){await this.testingLibrary.fireEvent.keyDown(this.treema,{key:"Backspace",code:"Backspace"}),await sleep(this.speed)}async fireMouseClick(e){await this.testingLibrary.fireEvent.click(e),await sleep(this.speed)}async keyboard(input){await user.keyboard(input),await sleep(this.speed)}async type(element,text){await user.type(element,text),await sleep(this.speed)}async clear(){await user.clear(this.testingLibrary.within(this.treema).getByRole("textbox"))}async selectOptions(select,values){await user.selectOptions(select,values),await sleep(this.speed)}getLastPath(){return lastPath}getData(){return lastData}}},"./src/Treema/tests/utils-storybook.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{x:()=>wrapGenericTestInStory});var _context__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/Treema/tests/context.ts"),_storybook_jest__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/jest/dist/esm/index.js"),_storybook_testing_library__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/testing-library/dist/esm/index.js");const wrapGenericTestInStory=(test,args)=>({name:test.name,args,play:async({canvasElement})=>{const context=new _context__WEBPACK_IMPORTED_MODULE_0__.g6(canvasElement,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_2__);await(0,_context__WEBPACK_IMPORTED_MODULE_0__._v)(100),await test.test(context)}})},"?4f7e":()=>{},"./node_modules/@babel/runtime/helpers/esm/extends.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}__webpack_require__.d(__webpack_exports__,{Z:()=>_extends})}}]);