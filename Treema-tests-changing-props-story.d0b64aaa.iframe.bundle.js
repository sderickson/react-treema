(self.webpackChunkreact_treema=self.webpackChunkreact_treema||[]).push([[337],{"./src/Treema/tests/changing-props.story.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{SelectStaysOnAdd:()=>SelectStaysOnAdd,default:()=>changing_props_story});var utils_storybook=__webpack_require__("./src/Treema/tests/utils-storybook.ts");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}var context=__webpack_require__("./src/Treema/tests/context.ts"),utils=__webpack_require__("./src/Treema/utils.ts"),TreemaRoot=__webpack_require__("./src/Treema/TreemaRoot.tsx"),react=__webpack_require__("./node_modules/react/index.js");const ParentComponent=props=>{const[data,setData]=(0,react.useState)(props.data),onClick=(0,react.useCallback)((()=>{const newData=(0,utils.d9)(data);newData.push(newData.length),setData(newData)}),[data]),onEvent=(0,react.useCallback)((e=>{"change_data_event"===e.type&&setData(e.data)}),[setData]);return react.createElement("div",{"data-testid":"integration-test"},react.createElement("input",{type:"button",onClick,value:"test?","data-testid":"test-add-element"}),react.createElement(TreemaRoot.W,_extends({},props,{data,onEvent})),react.createElement("pre",{"data-testid":"test-display"},JSON.stringify(data)))},selectStaysOnAddTest={name:"selection should remain when items are added",test:async ctx=>{await ctx.testingLibrary.fireEvent.click(await ctx.testingLibrary.within(ctx.root).findByTestId("test-add-element")),await ctx.fireFocus(),await ctx.fireTab(),await ctx.fireTab(),await ctx.fireTab(),await ctx.fireTab(),await ctx.fireTab(),await ctx.fireTab(),await ctx.fireEnter(),await ctx.type("4"),await ctx.fireTab(),await ctx.testingLibrary.fireEvent.click(await ctx.testingLibrary.within(ctx.root).findByTestId("test-add-element")),await ctx.testingLibrary.within(ctx.root).findByText(JSON.stringify([0,1,2,3,40,5]))}},changingPropsArgs={schemaLib:utils.noopLib,onEvent:context.Vl,data:[0,1,2],schema:{type:"array",items:{type:"number"}}};try{ParentComponent.displayName="ParentComponent",ParentComponent.__docgenInfo={description:"A parent component that has the data stored in its useState hook. It includes buttons for\nchanging the data, a display for the data, and a Treema instance.",displayName:"ParentComponent",props:{data:{defaultValue:{value:'An "empty" or "falsy" value of whatever type is given in the schema.'},description:"The data to display in the treema. Should conform to the schema given.",name:"data",required:!0,type:{name:"any"}},schema:{defaultValue:{value:"{} (any JSON object allowed)"},description:"The schema to use to validate the data. Treema will use this to determine\nhow to construct the UI, and how the data may be edited\n@see https://json-schema.org/understanding-json-schema/",name:"schema",required:!0,type:{name:"TreemaSupportedJsonSchema"}},schemaLib:{defaultValue:{value:"A noop version - no validation, no error messages"},description:'A schema library instance to use to validate the data.\nThere are [many JavaScript libraries](https://json-schema.org/implementations.html#validators)\nthat support various drafts of the JSON Schema spec.\nWrap your chosen library to match the TypeScript interface "SchemaLib".\nGenerally you should initialize the library, which may provide options\nwhich will affect the behavior of Treema. Treema also depends on this library\nto provide error messages.\n\nSee wrapTv4 and wrapAjv for examples.',name:"schemaLib",required:!1,type:{name:"TreemaWrappedSchemaLib"}},onEvent:{defaultValue:null,description:"A callback for when the user interacts with the treema.\n\nSupported events:\n- `change_select_event`: when the user selects a node. Includes `path` in the event.",name:"onEvent",required:!1,type:{name:"TreemaEventHandler"}},definitions:{defaultValue:{value:"The default definitions, which cover all JSON Schema types and a few advanced examples."},description:'Custom Treema node definitions. Use these to customize how Treema renders data\nof certain types. Treema will first see if there\'s a match for the "format" on the\ndata\'s schema, then will match its "type". If no match is found, Treema will use the\ndefault node definitions, keying off what type the data currently is.\n\nSee [TreemaTypeDefinition](https://github.com/sderickson/react-treema/blob/4923128ed24089d8677b11608cbe9afbfde1c51b/src/Treema/types.ts#L319)\nfor documentation on definitions.',name:"definitions",required:!1,type:{name:"TreemaTypeDefinition[]"}},initOpen:{defaultValue:{value:"All levels are open by default"},description:"The number of levels deep to open the tree by default.",name:"initOpen",required:!1,type:{name:"number"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Treema/tests/changing-props.tsx#ParentComponent"]={docgenInfo:ParentComponent.__docgenInfo,name:"ParentComponent",path:"src/Treema/tests/changing-props.tsx#ParentComponent"})}catch(__react_docgen_typescript_loader_error){}const changing_props_story={title:"IntegrationTests/UpdateData",component:ParentComponent,parameters:{docs:{description:{component:"This storybook demonstrates and tests having the parent component be the source of truth for\nthe data.\n\nIn all but the most simple uses of Treema, an ancestor node of Treema will need\nto mediate between other sources of changes such as other inputs on the page,\nor I/O streams such as file or network activity.\n\nIf the data value passed in changes, Treema will replace whatever it currently has with\nthe new value and, as much as possible, maintain other state continuity such as selection\nand opened/closed states. Likewise, when Treema emits that its data has changed, the\ncomponent which is managing data should broadcast these changes appropriately."}}}},SelectStaysOnAdd=(0,utils_storybook.x)(selectStaysOnAddTest,changingPropsArgs);SelectStaysOnAdd.parameters={...SelectStaysOnAdd.parameters,docs:{...SelectStaysOnAdd.parameters?.docs,source:{originalSource:"wrapGenericTestInStory(selectStaysOnAddTest, changingPropsArgs)",...SelectStaysOnAdd.parameters?.docs?.source}}}},"./src/Treema/tests/context.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Vl:()=>onEvent,_v:()=>sleep,g6:()=>TreemaStorybookTestContext});const user=__webpack_require__("./node_modules/@testing-library/user-event/dist/esm/index.js").Z.setup();function sleep(ms){return new Promise((resolve=>setTimeout(resolve,ms)))}let lastPath,lastData;const onEvent=event=>{"change_select_event"===event.type&&(lastPath=event.path),"change_data_event"===event.type&&(lastData=event.data)};class TreemaStorybookTestContext{constructor(root,jest,testingLibrary,speed=200){this.root=void 0,this.treema=void 0,this.testingLibrary=void 0,this.expect=void 0,this.speed=void 0,this.root=root,"treema-root"===this.root.getAttribute("data-testid")?this.treema=this.root:this.treema=testingLibrary.within(this.root).getByTestId("treema-root"),this.testingLibrary=testingLibrary,this.expect=jest.expect,this.speed=speed}query(){return this.testingLibrary.within(this.root)}async fireFocus(){await this.testingLibrary.fireEvent.focus(this.treema),await sleep(this.speed)}async fireArrowDown(){await this.testingLibrary.fireEvent.keyDown(this.treema,{key:"ArrowDown",code:"ArrowDown"}),await sleep(this.speed)}async fireArrowUp(){await this.testingLibrary.fireEvent.keyDown(this.treema,{key:"ArrowUp",code:"ArrowUp"}),await sleep(this.speed)}async fireArrowLeft(){await this.testingLibrary.fireEvent.keyDown(this.treema,{key:"ArrowLeft",code:"ArrowLeft"}),await sleep(this.speed)}async fireArrowRight(){await this.testingLibrary.fireEvent.keyDown(this.treema,{key:"ArrowRight",code:"ArrowRight"}),await sleep(this.speed)}async fireEnter(){await this.testingLibrary.fireEvent.keyDown(this.treema,{key:"Enter",code:"Enter"}),await sleep(this.speed)}async fireTab(){await this.testingLibrary.fireEvent.keyDown(this.treema,{key:"Tab",code:"Tab"}),await sleep(this.speed)}async fireBackspace(){await this.testingLibrary.fireEvent.keyDown(this.treema,{key:"Backspace",code:"Backspace"}),await sleep(this.speed)}async type(input){await user.keyboard(input),await sleep(this.speed)}async clear(){await user.clear(this.testingLibrary.within(this.treema).getByRole("textbox"))}async selectOptions(select,values){await user.selectOptions(select,values),await sleep(this.speed)}getLastPath(){return lastPath}getData(){return lastData}}},"./src/Treema/tests/utils-storybook.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{x:()=>wrapGenericTestInStory});var _context__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/Treema/tests/context.ts"),_storybook_jest__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/jest/dist/esm/index.js"),_storybook_testing_library__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/testing-library/dist/esm/index.js");const wrapGenericTestInStory=(test,args)=>({name:test.name,args,play:async({canvasElement})=>{const context=new _context__WEBPACK_IMPORTED_MODULE_0__.g6(canvasElement,_storybook_jest__WEBPACK_IMPORTED_MODULE_1__,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_2__);await(0,_context__WEBPACK_IMPORTED_MODULE_0__._v)(100),await test.test(context)}})},"?4f7e":()=>{}}]);