"use strict";(self.webpackChunkreact_treema=self.webpackChunkreact_treema||[]).push([[821],{"./src/Treema/Treema.story.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AjvValidator:()=>AjvValidator,BasicExample:()=>BasicExample,CustomNodes:()=>CustomNodes,DefaultValues:()=>DefaultValues,InputAttributes:()=>InputAttributes,ItemsAndAdditionalItems:()=>ItemsAndAdditionalItems,Properties:()=>Properties,Refs:()=>Refs,RequiredValues:()=>RequiredValues,StringInputTypes:()=>StringInputTypes,Tv4Validator:()=>Tv4Validator,TypeSelector:()=>TypeSelector,UnspecifiedJson:()=>UnspecifiedJson,WorkingSchemas:()=>WorkingSchemas,default:()=>Treema_story});var TreemaRoot=__webpack_require__("./src/Treema/TreemaRoot.tsx"),tv4=__webpack_require__("./node_modules/tv4/tv4.js"),tv4_default=__webpack_require__.n(tv4),utils=__webpack_require__("./src/Treema/utils.ts"),ajv=__webpack_require__("./node_modules/ajv/dist/ajv.js"),ajv_default=__webpack_require__.n(ajv),react=__webpack_require__("./node_modules/react/index.js");const TreemaPoint2dNodeDefinition={id:"point-2d",schema:{$id:"https://example.com/point-2d.schema.json",type:"object",properties:{x:{type:"number"},y:{type:"number"}},additionalProperties:!1},Display:props=>{const{data}=props;return react.createElement("span",null,"(",data.x,", ",data.y,")")}};try{TreemaPoint2dNodeDefinition.displayName="TreemaPoint2dNodeDefinition",TreemaPoint2dNodeDefinition.__docgenInfo={description:"Not included in Treema by default! This is an example of how to customize display of a complex object.",displayName:"TreemaPoint2dNodeDefinition",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Treema/definitions/point2d.tsx#TreemaPoint2dNodeDefinition"]={docgenInfo:TreemaPoint2dNodeDefinition.__docgenInfo,name:"TreemaPoint2dNodeDefinition",path:"src/Treema/definitions/point2d.tsx#TreemaPoint2dNodeDefinition"})}catch(__react_docgen_typescript_loader_error){}var hooks=__webpack_require__("./src/Treema/definitions/hooks.tsx");const TreemaLongStringNodeDefinition={id:"long-string",schema:{$id:"https://example.com/long-string.schema.json",type:"string"},shortened:!1,Display:({data})=>react.createElement("div",null,data),Edit:({data,schema,onChange})=>{const ref=(0,hooks.S)();return(0,hooks.f)((0,react.useCallback)((e=>!("Enter"===e.key&&!e.metaKey&&!e.ctrlKey)),[])),react.createElement("textarea",{value:data,ref,onChange:e=>{onChange(e.target.value)},maxLength:schema.maxLength||void 0,minLength:schema.minLength||void 0,"data-testid":"treema-edit-long-string-input"})}};try{TreemaLongStringNodeDefinition.displayName="TreemaLongStringNodeDefinition",TreemaLongStringNodeDefinition.__docgenInfo={description:"Not included in Treema by default! This is an example of how to customize rendering of a string.",displayName:"TreemaLongStringNodeDefinition",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Treema/definitions/long-string.tsx#TreemaLongStringNodeDefinition"]={docgenInfo:TreemaLongStringNodeDefinition.__docgenInfo,name:"TreemaLongStringNodeDefinition",path:"src/Treema/definitions/long-string.tsx#TreemaLongStringNodeDefinition"})}catch(__react_docgen_typescript_loader_error){}var markdown=__webpack_require__("./src/Treema/definitions/markdown.tsx");const Treema_story={title:"Main/TreemaRoot",component:TreemaRoot.W,tags:["autodocs"]},BasicExample={args:{schemaLib:{validateMultiple:()=>({valid:!0,errors:[]}),getSchema:()=>({})},onEvent:e=>console.log(e),data:[{"street-address":"10 Downing Street","country-name":"UK",locality:"London",name:"Prime Minister",friend:!0},{"street-address":"1600 Amphitheatre Pkwy","phone-number":"(650) 253-0000",name:"Google",number:100},{"street-address":"45 Rockefeller Plaza",region:"NY",locality:"New York",name:"Rockefeller Center"}],schema:{title:"Address Book",type:"array",items:{additionalProperties:!1,type:"object",displayProperty:"name",properties:{number:{type:"number",title:"Number"},name:{type:"string",maxLength:20},"street-address":{title:"Address 1",description:"Don't forget the number.",type:"string"},locality:{type:"string",title:"Locality"},region:{title:"Region",type:"string"},"country-name":{type:"string",title:"Country"},friend:{type:"boolean",title:"Friend"},"phone-number":{type:"string",maxLength:20,minLength:4,title:"Phone Number"}}}}}},TypeSelector={args:{data:{name:"Bob",numbers:["401-401-1337",["123-456-7890"]],address:"Mars"},schema:{type:"object",displayProperty:"name",properties:{name:{type:"string",title:"NAME"},numbers:{type:"array",items:{type:["string","array"]}},address:{type:"string"}}}}},badData={string:1,number:"1",null:"1",boolean:"1",object:"1",array:"1","anything-but-boolean":!0,dne:"1","number-or-string":null},badSchema={type:"object",title:"Data w/Lots of Errors",properties:{string:{type:"string"},number:{type:"number"},null:{type:"null"},boolean:{type:"boolean"},object:{type:"object"},array:{type:"array"},"anything-but-boolean":{not:{type:"boolean"}},"number-or-string":{type:["number","string"]}},additionalProperties:!1},Tv4Validator={args:{data:badData,schema:badSchema,schemaLib:(0,utils.tk)(tv4_default())}},AjvValidator={args:{data:badData,schema:badSchema,schemaLib:(0,utils.rQ)(new(ajv_default())({allErrors:!0}))}},geoSchema={$id:"https://example.com/geographical-location.schema.json",$schema:"https://json-schema.org/draft/2020-12/schema",title:"Longitude and Latitude Values",description:"A geographical coordinate.",required:["latitude","longitude"],type:"object",properties:{latitude:{type:"number",minimum:-90,maximum:90},longitude:{type:"number",minimum:-180,maximum:180}}},calendarSchema={$id:"https://example.com/calendar.schema.json",$schema:"https://json-schema.org/draft/2020-12/schema",description:"A representation of an event",type:"object",required:["dtstart","summary"],properties:{dtstart:{type:"string",description:"Event starting time"},dtend:{type:"string",description:"Event ending time"},summary:{type:"string"},location:{type:"string"},url:{type:"string"},duration:{type:"string",description:"Event duration"},rdate:{type:"string",description:"Recurrence date"},rrule:{type:"string",description:"Recurrence rule"},category:{type:"string"},description:{type:"string"},geo:{$ref:"https://example.com/geographical-location.schema.json"}}};tv4_default().addSchema(geoSchema.$id,geoSchema),tv4_default().addSchema(calendarSchema.$id,calendarSchema);const Refs={args:{data:[{dtstart:"2021-01-01T00:00:00Z",summary:"New Year's Day",geo:{latitude:9e3,longitude:74.006}}],schema:{title:"Calendar Events with Locations",type:"array",items:{$ref:"https://example.com/calendar.schema.json"}},schemaLib:(0,utils.tk)(tv4_default())}},WorkingSchemas={args:{data:{example:{type:"a",foo:"bar"}},schema:{title:"Object with Example Property of Type A or B",type:"object",properties:{example:{type:"object",properties:{type:{title:"Inherited Type Title"}},required:["type"],oneOf:[{title:"type a",properties:{type:{const:"a",type:"string"},foo:{type:"number",title:"Numbered Foo"}},default:{type:"a",foo:1},required:["foo"]},{title:"type b",properties:{type:{const:"b",type:"string"},foo:{type:"string",title:"Stringed Foo"}},default:{type:"b",foo:"bar"},required:["foo"]}]}}},schemaLib:(0,utils.rQ)(new(ajv_default())({allErrors:!0}))}},Properties={args:{data:{asdf:"explicitly defined value",abc:"lower case value",ABC:"upper case value",foo1:"additional value"},schema:{type:"object",title:"Object with Properties, PatternProperties, and AdditionalProperties Schemas",properties:{asdf:{type:"string",title:"Explicitly Defined Property"}},patternProperties:{"^[a-z]+$":{type:"string",title:"Lower Case Regex"},"^[A-Z]+$":{type:"string",title:"Upper Case Regex"}},additionalProperties:{type:"string",title:"Additional Property"}}}},ItemsAndAdditionalItems={args:{data:[1,2,3,4,5],schema:{type:"array",title:"Array with Items and AdditionalItems Schemas",items:[{type:"number",title:"First Item"},{type:"number",title:"Second Item"}],additionalItems:{type:"number",title:"Additional Item"}}}},DefaultValues={args:{data:{explicitlySetValue:"explicitly set value",deepDefaultValue:{setString:"string"}},schema:{type:"object",title:"Object with Complex Default Values",default:{default:"default value",deepDefaultValue:{setString:"default string",setNumber:123,setArray:[1,2,3]},recurseDefault:{}},properties:{default:{type:"string"},explicitlySetValue:{type:"string"},deepDefaultValue:{type:"object",properties:{setString:{type:"string"},setNumber:{type:"number"},setArray:{type:"array",items:{type:"number"}}}},recurseDefault:{type:"object",default:{deepRecurse:"recursive default value"},properties:{deepRecurse:{type:"string"}}}}}}},RequiredValues={args:{data:{},schema:{type:"object",title:"Object with Required Values of All Basic Types",additionalProperties:!1,properties:{string:{type:"string"},number:{type:"number"},null:{type:"null"},boolean:{type:"boolean"},array:{type:"array",items:{type:"number",default:42}},object:{type:"object"},integer:{type:"integer"},def:{default:1337}},required:["integer","string","number","null","boolean","array","object","def"]}}},StringInputTypes={args:{data:{color:"#ff0000",date:"2021-01-01","datetime-local":"2021-01-01T00:00:00",email:"test@example.com",password:"password",tel:"1234567890",text:"text",time:"00:00:00",url:"https://example.com"},schema:{type:"object",title:"Object with All String Input Types",properties:{color:{type:"string",format:"color"},date:{type:"string",format:"date"},"datetime-local":{type:"string",format:"datetime-local"},email:{type:"string",format:"email"},password:{type:"string",format:"password"},tel:{type:"string",format:"tel"},text:{type:"string",format:"text"},time:{type:"string",format:"time"},url:{type:"string",format:"url"}}}}},InputAttributes={args:{data:{max10:9,maxLength10:"1234567890",min10:11,minLength10:"12345678901"},schema:{type:"object",title:"Object with All Kinds of Input Attributes",properties:{max10:{type:"number",maximum:10},maxLength10:{type:"string",maxLength:10},min10:{type:"number",minimum:10},minLength10:{type:"string",minLength:10}}}}},CustomNodes={args:{data:{point2d:{x:50,y:80},longString:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",markdown:"## Markdown document\n      *hello world!*"},schema:{type:"object",title:"Object with a Couple Custom Node Types",properties:{point2d:{$ref:TreemaPoint2dNodeDefinition.schema?.$id},longString:{$ref:TreemaLongStringNodeDefinition.schema?.$id},markdown:{$ref:markdown.Q.schema?.$id}}},definitions:[TreemaPoint2dNodeDefinition,TreemaLongStringNodeDefinition,markdown.Q]}},UnspecifiedJson={args:{data:{a:{b:{}}},schema:{}}};BasicExample.parameters={...BasicExample.parameters,docs:{...BasicExample.parameters?.docs,source:{originalSource:"{\n  args: {\n    schemaLib: {\n      validateMultiple: () => ({\n        valid: true,\n        errors: []\n      }),\n      getSchema: () => ({})\n    },\n    onEvent: (e: any) => console.log(e),\n    data: [{\n      'street-address': '10 Downing Street',\n      'country-name': 'UK',\n      'locality': 'London',\n      'name': 'Prime Minister',\n      'friend': true\n    }, {\n      'street-address': '1600 Amphitheatre Pkwy',\n      'phone-number': '(650) 253-0000',\n      'name': 'Google',\n      'number': 100\n    }, {\n      'street-address': '45 Rockefeller Plaza',\n      'region': 'NY',\n      'locality': 'New York',\n      'name': 'Rockefeller Center'\n    }],\n    schema: {\n      'title': 'Address Book',\n      'type': 'array',\n      'items': {\n        'additionalProperties': false,\n        'type': 'object',\n        'displayProperty': 'name',\n        'properties': {\n          'number': {\n            'type': 'number',\n            'title': 'Number'\n          },\n          'name': {\n            'type': 'string',\n            'maxLength': 20\n          },\n          'street-address': {\n            'title': 'Address 1',\n            'description': \"Don't forget the number.\",\n            'type': 'string'\n          },\n          'locality': {\n            'type': 'string',\n            'title': 'Locality'\n          },\n          'region': {\n            'title': 'Region',\n            'type': 'string'\n          },\n          'country-name': {\n            'type': 'string',\n            'title': 'Country'\n          },\n          'friend': {\n            'type': 'boolean',\n            'title': 'Friend'\n          },\n          'phone-number': {\n            'type': 'string',\n            'maxLength': 20,\n            'minLength': 4,\n            'title': 'Phone Number'\n          }\n        }\n      }\n    }\n  }\n}",...BasicExample.parameters?.docs?.source},description:{story:"This Treema shows a relatively simple data structure: an array of objects with values that are\nall primitive data types. You can try creating a new object, editing the values, and deleting\nentries or values.\n\nNavigate quickly and easily by keyboard. Try using arrow keys, enter,\ntab, and escape. Use shift to reverse direction. When entering a new property, press arrow-down\nto use the native browser autocomplete for available properties.",...BasicExample.parameters?.docs?.description}}},TypeSelector.parameters={...TypeSelector.parameters,docs:{...TypeSelector.parameters?.docs,source:{originalSource:"{\n  args: {\n    data: {\n      name: 'Bob',\n      numbers: ['401-401-1337', ['123-456-7890']],\n      address: 'Mars'\n    },\n    schema: {\n      type: 'object',\n      displayProperty: 'name',\n      properties: {\n        name: {\n          type: 'string',\n          title: 'NAME'\n        },\n        numbers: {\n          type: 'array',\n          items: {\n            'type': ['string', 'array']\n          }\n        },\n        address: {\n          type: 'string'\n        }\n      }\n    }\n  }\n}",...TypeSelector.parameters?.docs?.source},description:{story:'Schemas are highly flexible, including allowing properties to be of various types. In this example, the "numbers"\nproperty can either by an array or string. Treema provides a `select` box in this case, allowing switching between\nthose two types.',...TypeSelector.parameters?.docs?.description}}},Tv4Validator.parameters={...Tv4Validator.parameters,docs:{...Tv4Validator.parameters?.docs,source:{originalSource:"{\n  args: {\n    data: badData,\n    schema: badSchema,\n    schemaLib: wrapTv4(tv4)\n  }\n}",...Tv4Validator.parameters?.docs?.source},description:{story:"Tv4 is a JSON Schema validator that supports draft-4 of the spec. It is fairly old and no longer\nmaintained, but it is an example of how Treema can support a wide variety of validators. The original\nTreema library was tightly coupled to tv4, but not this one!",...Tv4Validator.parameters?.docs?.description}}},AjvValidator.parameters={...AjvValidator.parameters,docs:{...AjvValidator.parameters?.docs,source:{originalSource:"{\n  args: {\n    data: badData,\n    schema: badSchema,\n    schemaLib: wrapAjv(new Ajv({\n      allErrors: true\n    }))\n  }\n}",...AjvValidator.parameters?.docs?.source},description:{story:'Ajv is a JSON Schema validator that supports various drafs of the spec, including the most recent (2020-12).\nIt is a popular validator (as of 2023), and shows how different validators might cause Treema to act differently.\nFor example, Ajv when reporting an "additionalProperties" error, will target the object with the offending\nproperty, while Tv4 will target the property itself. They also clearly have different error messages.',...AjvValidator.parameters?.docs?.description}}},Refs.parameters={...Refs.parameters,docs:{...Refs.parameters?.docs,source:{originalSource:"{\n  args: {\n    data: [{\n      'dtstart': '2021-01-01T00:00:00Z',\n      'summary': \"New Year's Day\",\n      'geo': {\n        'latitude': 9000,\n        'longitude': 74.006\n      }\n    }],\n    schema: {\n      'title': 'Calendar Events with Locations',\n      'type': 'array',\n      'items': {\n        '$ref': 'https://example.com/calendar.schema.json'\n      }\n    },\n    schemaLib: wrapTv4(tv4)\n  }\n}",...Refs.parameters?.docs?.source},description:{story:"Treema relies on validators to resolve `$ref` references as well as validate data. In this example,\nthe schema given to Treema is an array of calendar events, which are defined by another schema\n (specifically the one [here](https://json-schema.org/learn/examples/calendar.schema.json)).\nThis schema references\n[yet another schema](https://json-schema.org/learn/examples/geographical-location.schema.json)\nfor a geographic location. Both of these schemas are added to the validator (in this case tv4)\nbefore it is given to the Treema React component. Then Treema is able to validate the data,\nin this case the invalid latitude data, even through two references.",...Refs.parameters?.docs?.description}}},WorkingSchemas.parameters={...WorkingSchemas.parameters,docs:{...WorkingSchemas.parameters?.docs,source:{originalSource:"{\n  args: {\n    data: {\n      example: {\n        type: 'a',\n        foo: 'bar'\n      }\n    },\n    schema: {\n      title: 'Object with Example Property of Type A or B',\n      type: 'object',\n      properties: {\n        example: {\n          type: 'object',\n          properties: {\n            type: {\n              title: 'Inherited Type Title'\n            }\n          },\n          required: ['type'],\n          oneOf: [{\n            title: 'type a',\n            properties: {\n              type: {\n                const: 'a',\n                type: 'string'\n              },\n              foo: {\n                type: 'number',\n                title: 'Numbered Foo'\n              }\n            },\n            default: {\n              type: 'a',\n              foo: 1\n            },\n            required: ['foo']\n          }, {\n            title: 'type b',\n            properties: {\n              type: {\n                const: 'b',\n                type: 'string'\n              },\n              foo: {\n                type: 'string',\n                title: 'Stringed Foo'\n              }\n            },\n            default: {\n              type: 'b',\n              foo: 'bar'\n            },\n            required: ['foo']\n          }]\n        }\n      }\n    },\n    schemaLib: wrapAjv(new Ajv({\n      allErrors: true\n    }))\n  }\n}",...WorkingSchemas.parameters?.docs?.source},description:{story:'Treema has an internal concept of "Working Schemas". Basically if you have a complex schema (uses combinatorial applicators like\n`oneOf` or `anyOf`, or has more than one possible `type`), Treema will generate a set of "working schemas" for the user to\nchoose from, and based on the selection will show the correct errors (ignoring errors from other options).\n\nIn this example, an object can either be of "type a" or "type b", but the data fits neither schema. The user can switch between\nthe two and see how the data doesn\'t fit with either and then fix the data in whichever direction.\n\nTreema will also attempt to smartly merge schemas together, for example the schema with its oneOf, or every allOf together.\nIt will tend to simply override one property with another, except for properties which it will recursively merge. You can\nsee the recursive merging here where the title for "type" is provided in the base schema but shows up for each working\nschema. It will also concat `required` lists together, which you can see by trying to delete any of the defined properties.\n\nYou should each `oneOf` and `anyOf` schema a distinct `title` to make it easier for the user to understand what they are choosing between.',...WorkingSchemas.parameters?.docs?.description}}},Properties.parameters={...Properties.parameters,docs:{...Properties.parameters?.docs,source:{originalSource:"{\n  args: {\n    data: {\n      'asdf': 'explicitly defined value',\n      'abc': 'lower case value',\n      'ABC': 'upper case value',\n      'foo1': 'additional value'\n    },\n    schema: {\n      'type': 'object',\n      'title': 'Object with Properties, PatternProperties, and AdditionalProperties Schemas',\n      'properties': {\n        'asdf': {\n          'type': 'string',\n          'title': 'Explicitly Defined Property'\n        }\n      },\n      'patternProperties': {\n        '^[a-z]+$': {\n          'type': 'string',\n          'title': 'Lower Case Regex'\n        },\n        '^[A-Z]+$': {\n          'type': 'string',\n          'title': 'Upper Case Regex'\n        }\n      },\n      'additionalProperties': {\n        'type': 'string',\n        title: 'Additional Property'\n      }\n    }\n  }\n}",...Properties.parameters?.docs?.source},description:{story:"Treema supports `properties`, `patternProperties`, and `additionalProperties`, taking into\naccount precedence.",...Properties.parameters?.docs?.description}}},ItemsAndAdditionalItems.parameters={...ItemsAndAdditionalItems.parameters,docs:{...ItemsAndAdditionalItems.parameters?.docs,source:{originalSource:"{\n  args: {\n    data: [1, 2, 3, 4, 5],\n    schema: {\n      'type': 'array',\n      'title': 'Array with Items and AdditionalItems Schemas',\n      'items': [{\n        'type': 'number',\n        'title': 'First Item'\n      }, {\n        'type': 'number',\n        'title': 'Second Item'\n      }],\n      'additionalItems': {\n        'type': 'number',\n        'title': 'Additional Item'\n      }\n    }\n  }\n}",...ItemsAndAdditionalItems.parameters?.docs?.source},description:{story:"Treema supports `items` and `additionalItems`.",...ItemsAndAdditionalItems.parameters?.docs?.description}}},DefaultValues.parameters={...DefaultValues.parameters,docs:{...DefaultValues.parameters?.docs,source:{originalSource:"{\n  args: {\n    data: {\n      explicitlySetValue: 'explicitly set value',\n      deepDefaultValue: {\n        setString: 'string'\n      }\n    },\n    schema: {\n      'type': 'object',\n      'title': 'Object with Complex Default Values',\n      default: {\n        'default': 'default value',\n        'deepDefaultValue': {\n          'setString': 'default string',\n          'setNumber': 123,\n          'setArray': [1, 2, 3]\n        },\n        'recurseDefault': {}\n      },\n      'properties': {\n        'default': {\n          'type': 'string'\n        },\n        'explicitlySetValue': {\n          'type': 'string'\n        },\n        'deepDefaultValue': {\n          'type': 'object',\n          'properties': {\n            'setString': {\n              'type': 'string'\n            },\n            'setNumber': {\n              'type': 'number'\n            },\n            'setArray': {\n              'type': 'array',\n              'items': {\n                'type': 'number'\n              }\n            }\n          }\n        },\n        'recurseDefault': {\n          'type': 'object',\n          default: {\n            'deepRecurse': 'recursive default value'\n          },\n          properties: {\n            'deepRecurse': {\n              'type': 'string'\n            }\n          }\n        }\n      }\n    }\n  }\n}",...DefaultValues.parameters?.docs?.source},description:{story:"Treema fills in default values, but leaves them unset in data unless explicitly set, or required.",...DefaultValues.parameters?.docs?.description}}},RequiredValues.parameters={...RequiredValues.parameters,docs:{...RequiredValues.parameters?.docs,source:{originalSource:"{\n  args: {\n    data: {},\n    schema: {\n      'type': 'object',\n      'title': 'Object with Required Values of All Basic Types',\n      'additionalProperties': false,\n      'properties': {\n        'string': {\n          type: 'string'\n        },\n        'number': {\n          type: 'number'\n        },\n        'null': {\n          type: 'null'\n        },\n        'boolean': {\n          type: 'boolean'\n        },\n        'array': {\n          type: 'array',\n          items: {\n            type: 'number',\n            default: 42\n          }\n        },\n        'object': {\n          type: 'object'\n        },\n        'integer': {\n          type: 'integer'\n        },\n        'def': {\n          'default': 1337\n        }\n      },\n      'required': ['integer', 'string', 'number', 'null', 'boolean', 'array', 'object', 'def']\n    }\n  }\n}",...RequiredValues.parameters?.docs?.source},description:{story:"Treema automatically fills required values, either for data passed in or as it is entered.",...RequiredValues.parameters?.docs?.description}}},StringInputTypes.parameters={...StringInputTypes.parameters,docs:{...StringInputTypes.parameters?.docs,source:{originalSource:"{\n  args: {\n    data: {\n      'color': '#ff0000',\n      'date': '2021-01-01',\n      'datetime-local': '2021-01-01T00:00:00',\n      'email': 'test@example.com',\n      'password': 'password',\n      'tel': '1234567890',\n      'text': 'text',\n      'time': '00:00:00',\n      'url': 'https://example.com'\n    },\n    schema: {\n      'type': 'object',\n      'title': 'Object with All String Input Types',\n      'properties': {\n        'color': {\n          'type': 'string',\n          'format': 'color'\n        },\n        'date': {\n          'type': 'string',\n          'format': 'date'\n        },\n        'datetime-local': {\n          'type': 'string',\n          'format': 'datetime-local'\n        },\n        'email': {\n          'type': 'string',\n          'format': 'email'\n        },\n        'password': {\n          'type': 'string',\n          'format': 'password'\n        },\n        'tel': {\n          'type': 'string',\n          'format': 'tel'\n        },\n        'text': {\n          'type': 'string',\n          'format': 'text'\n        },\n        'time': {\n          'type': 'string',\n          'format': 'time'\n        },\n        'url': {\n          'type': 'string',\n          'format': 'url'\n        }\n      }\n    }\n  }\n}",...StringInputTypes.parameters?.docs?.source},description:{story:"Schema `format` values will often use the equivalent browser input type. The following example includes\nall supported string input types. Support may vary based on browser.\n\nSee the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types) for more information.",...StringInputTypes.parameters?.docs?.description}}},InputAttributes.parameters={...InputAttributes.parameters,docs:{...InputAttributes.parameters?.docs,source:{originalSource:"{\n  args: {\n    data: {\n      max10: 9,\n      maxLength10: '1234567890',\n      min10: 11,\n      minLength10: '12345678901'\n    },\n    schema: {\n      'type': 'object',\n      'title': 'Object with All Kinds of Input Attributes',\n      'properties': {\n        'max10': {\n          'type': 'number',\n          'maximum': 10\n        },\n        'maxLength10': {\n          'type': 'string',\n          'maxLength': 10\n        },\n        'min10': {\n          'type': 'number',\n          'minimum': 10\n        },\n        'minLength10': {\n          'type': 'string',\n          'minLength': 10\n        }\n      }\n    }\n  }\n}",...InputAttributes.parameters?.docs?.source},description:{story:"In some cases, Treema will fill `<input>` attribute fields. Currently the following are supported:\n* For strings, schema values for `maxLength` and `minLength` are set as `maxlength` and `minlength` input attributes.\n* For numbers, schema values for `minimum` and `maximum` are set to `min` and `max` input attributes.\n\nSee the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attributes) for more information.\n\nTODO: Add support for more input attributes.",...InputAttributes.parameters?.docs?.description}}},CustomNodes.parameters={...CustomNodes.parameters,docs:{...CustomNodes.parameters?.docs,source:{originalSource:"{\n  args: {\n    data: {\n      point2d: {\n        x: 50,\n        y: 80\n      },\n      longString: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',\n      markdown: `## Markdown document\n      *hello world!*`\n    },\n    schema: {\n      'type': 'object',\n      'title': 'Object with a Couple Custom Node Types',\n      'properties': {\n        'point2d': {\n          $ref: TreemaPoint2dNodeDefinition.schema?.$id\n        },\n        'longString': {\n          $ref: TreemaLongStringNodeDefinition.schema?.$id\n        },\n        'markdown': {\n          $ref: TreemaMarkdownNodeDefinition.schema?.$id\n        }\n      }\n    },\n    definitions: [TreemaPoint2dNodeDefinition, TreemaLongStringNodeDefinition, TreemaMarkdownNodeDefinition]\n  }\n}",...CustomNodes.parameters?.docs?.source},description:{story:"See [TreemaTypeDefinition](https://github.com/sderickson/react-treema/blob/4923128ed24089d8677b11608cbe9afbfde1c51b/src/Treema/types.ts#L319)\nfor how to define your own custom node types, extending beyond the basic types like strings and numbers. The following example\nhas a long string use a `textarea`, a 2d point object with a custom display, and markdown with an ace editor and rendered display.",...CustomNodes.parameters?.docs?.description}}},UnspecifiedJson.parameters={...UnspecifiedJson.parameters,docs:{...UnspecifiedJson.parameters?.docs,source:{originalSource:"{\n  args: {\n    data: {\n      'a': {\n        'b': {}\n      }\n    },\n    schema: {}\n  }\n}",...UnspecifiedJson.parameters?.docs?.source},description:{story:"If no schema is provided, essentially Treema acts as a free-form JSON data editor.\n\nTODO: combine this with a view of the raw JSON.",...UnspecifiedJson.parameters?.docs?.description}}};try{BasicExample.displayName="BasicExample",BasicExample.__docgenInfo={description:"This Treema shows a relatively simple data structure: an array of objects with values that are\nall primitive data types. You can try creating a new object, editing the values, and deleting\nentries or values.\n\nNavigate quickly and easily by keyboard. Try using arrow keys, enter,\ntab, and escape. Use shift to reverse direction. When entering a new property, press arrow-down\nto use the native browser autocomplete for available properties.",displayName:"BasicExample",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Treema/Treema.story.tsx#BasicExample"]={docgenInfo:BasicExample.__docgenInfo,name:"BasicExample",path:"src/Treema/Treema.story.tsx#BasicExample"})}catch(__react_docgen_typescript_loader_error){}try{TypeSelector.displayName="TypeSelector",TypeSelector.__docgenInfo={description:'Schemas are highly flexible, including allowing properties to be of various types. In this example, the "numbers"\nproperty can either by an array or string. Treema provides a `select` box in this case, allowing switching between\nthose two types.',displayName:"TypeSelector",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Treema/Treema.story.tsx#TypeSelector"]={docgenInfo:TypeSelector.__docgenInfo,name:"TypeSelector",path:"src/Treema/Treema.story.tsx#TypeSelector"})}catch(__react_docgen_typescript_loader_error){}try{Tv4Validator.displayName="Tv4Validator",Tv4Validator.__docgenInfo={description:"Tv4 is a JSON Schema validator that supports draft-4 of the spec. It is fairly old and no longer\nmaintained, but it is an example of how Treema can support a wide variety of validators. The original\nTreema library was tightly coupled to tv4, but not this one!",displayName:"Tv4Validator",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Treema/Treema.story.tsx#Tv4Validator"]={docgenInfo:Tv4Validator.__docgenInfo,name:"Tv4Validator",path:"src/Treema/Treema.story.tsx#Tv4Validator"})}catch(__react_docgen_typescript_loader_error){}try{AjvValidator.displayName="AjvValidator",AjvValidator.__docgenInfo={description:'Ajv is a JSON Schema validator that supports various drafs of the spec, including the most recent (2020-12).\nIt is a popular validator (as of 2023), and shows how different validators might cause Treema to act differently.\nFor example, Ajv when reporting an "additionalProperties" error, will target the object with the offending\nproperty, while Tv4 will target the property itself. They also clearly have different error messages.',displayName:"AjvValidator",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Treema/Treema.story.tsx#AjvValidator"]={docgenInfo:AjvValidator.__docgenInfo,name:"AjvValidator",path:"src/Treema/Treema.story.tsx#AjvValidator"})}catch(__react_docgen_typescript_loader_error){}try{Refs.displayName="Refs",Refs.__docgenInfo={description:"Treema relies on validators to resolve `$ref` references as well as validate data. In this example,\nthe schema given to Treema is an array of calendar events, which are defined by another schema\n (specifically the one [here](https://json-schema.org/learn/examples/calendar.schema.json)).\nThis schema references\n[yet another schema](https://json-schema.org/learn/examples/geographical-location.schema.json)\nfor a geographic location. Both of these schemas are added to the validator (in this case tv4)\nbefore it is given to the Treema React component. Then Treema is able to validate the data,\nin this case the invalid latitude data, even through two references.",displayName:"Refs",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Treema/Treema.story.tsx#Refs"]={docgenInfo:Refs.__docgenInfo,name:"Refs",path:"src/Treema/Treema.story.tsx#Refs"})}catch(__react_docgen_typescript_loader_error){}try{WorkingSchemas.displayName="WorkingSchemas",WorkingSchemas.__docgenInfo={description:'Treema has an internal concept of "Working Schemas". Basically if you have a complex schema (uses combinatorial applicators like\n`oneOf` or `anyOf`, or has more than one possible `type`), Treema will generate a set of "working schemas" for the user to\nchoose from, and based on the selection will show the correct errors (ignoring errors from other options).\n\nIn this example, an object can either be of "type a" or "type b", but the data fits neither schema. The user can switch between\nthe two and see how the data doesn\'t fit with either and then fix the data in whichever direction.\n\nTreema will also attempt to smartly merge schemas together, for example the schema with its oneOf, or every allOf together.\nIt will tend to simply override one property with another, except for properties which it will recursively merge. You can\nsee the recursive merging here where the title for "type" is provided in the base schema but shows up for each working\nschema. It will also concat `required` lists together, which you can see by trying to delete any of the defined properties.\n\nYou should each `oneOf` and `anyOf` schema a distinct `title` to make it easier for the user to understand what they are choosing between.',displayName:"WorkingSchemas",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Treema/Treema.story.tsx#WorkingSchemas"]={docgenInfo:WorkingSchemas.__docgenInfo,name:"WorkingSchemas",path:"src/Treema/Treema.story.tsx#WorkingSchemas"})}catch(__react_docgen_typescript_loader_error){}try{Properties.displayName="Properties",Properties.__docgenInfo={description:"Treema supports `properties`, `patternProperties`, and `additionalProperties`, taking into\naccount precedence.",displayName:"Properties",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Treema/Treema.story.tsx#Properties"]={docgenInfo:Properties.__docgenInfo,name:"Properties",path:"src/Treema/Treema.story.tsx#Properties"})}catch(__react_docgen_typescript_loader_error){}try{ItemsAndAdditionalItems.displayName="ItemsAndAdditionalItems",ItemsAndAdditionalItems.__docgenInfo={description:"Treema supports `items` and `additionalItems`.",displayName:"ItemsAndAdditionalItems",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Treema/Treema.story.tsx#ItemsAndAdditionalItems"]={docgenInfo:ItemsAndAdditionalItems.__docgenInfo,name:"ItemsAndAdditionalItems",path:"src/Treema/Treema.story.tsx#ItemsAndAdditionalItems"})}catch(__react_docgen_typescript_loader_error){}try{DefaultValues.displayName="DefaultValues",DefaultValues.__docgenInfo={description:"Treema fills in default values, but leaves them unset in data unless explicitly set, or required.",displayName:"DefaultValues",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Treema/Treema.story.tsx#DefaultValues"]={docgenInfo:DefaultValues.__docgenInfo,name:"DefaultValues",path:"src/Treema/Treema.story.tsx#DefaultValues"})}catch(__react_docgen_typescript_loader_error){}try{RequiredValues.displayName="RequiredValues",RequiredValues.__docgenInfo={description:"Treema automatically fills required values, either for data passed in or as it is entered.",displayName:"RequiredValues",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Treema/Treema.story.tsx#RequiredValues"]={docgenInfo:RequiredValues.__docgenInfo,name:"RequiredValues",path:"src/Treema/Treema.story.tsx#RequiredValues"})}catch(__react_docgen_typescript_loader_error){}try{StringInputTypes.displayName="StringInputTypes",StringInputTypes.__docgenInfo={description:"Schema `format` values will often use the equivalent browser input type. The following example includes\nall supported string input types. Support may vary based on browser.\n\nSee the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types) for more information.",displayName:"StringInputTypes",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Treema/Treema.story.tsx#StringInputTypes"]={docgenInfo:StringInputTypes.__docgenInfo,name:"StringInputTypes",path:"src/Treema/Treema.story.tsx#StringInputTypes"})}catch(__react_docgen_typescript_loader_error){}try{InputAttributes.displayName="InputAttributes",InputAttributes.__docgenInfo={description:"In some cases, Treema will fill `<input>` attribute fields. Currently the following are supported:\n* For strings, schema values for `maxLength` and `minLength` are set as `maxlength` and `minlength` input attributes.\n* For numbers, schema values for `minimum` and `maximum` are set to `min` and `max` input attributes.\n\nSee the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attributes) for more information.\n\nTODO: Add support for more input attributes.",displayName:"InputAttributes",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Treema/Treema.story.tsx#InputAttributes"]={docgenInfo:InputAttributes.__docgenInfo,name:"InputAttributes",path:"src/Treema/Treema.story.tsx#InputAttributes"})}catch(__react_docgen_typescript_loader_error){}try{CustomNodes.displayName="CustomNodes",CustomNodes.__docgenInfo={description:"See [TreemaTypeDefinition](https://github.com/sderickson/react-treema/blob/4923128ed24089d8677b11608cbe9afbfde1c51b/src/Treema/types.ts#L319)\nfor how to define your own custom node types, extending beyond the basic types like strings and numbers. The following example\nhas a long string use a `textarea`, a 2d point object with a custom display, and markdown with an ace editor and rendered display.",displayName:"CustomNodes",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Treema/Treema.story.tsx#CustomNodes"]={docgenInfo:CustomNodes.__docgenInfo,name:"CustomNodes",path:"src/Treema/Treema.story.tsx#CustomNodes"})}catch(__react_docgen_typescript_loader_error){}try{UnspecifiedJson.displayName="UnspecifiedJson",UnspecifiedJson.__docgenInfo={description:"If no schema is provided, essentially Treema acts as a free-form JSON data editor.\n\nTODO: combine this with a view of the raw JSON.",displayName:"UnspecifiedJson",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Treema/Treema.story.tsx#UnspecifiedJson"]={docgenInfo:UnspecifiedJson.__docgenInfo,name:"UnspecifiedJson",path:"src/Treema/Treema.story.tsx#UnspecifiedJson"})}catch(__react_docgen_typescript_loader_error){}},"./src/Treema/definitions/markdown.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Q:()=>TreemaMarkdownNodeDefinition});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),react_markdown__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/react-markdown/lib/react-markdown.js"),react_ace__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react-ace/lib/index.js"),_hooks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/Treema/definitions/hooks.tsx");__webpack_require__("./node_modules/ace-builds/src-noconflict/mode-markdown.js"),__webpack_require__("./node_modules/ace-builds/src-noconflict/theme-github.js"),__webpack_require__("./node_modules/ace-builds/src-noconflict/ext-language_tools.js");const TreemaMarkdownNodeDefinition={id:"markdown",schema:{$id:"https://example.com/markdown.schema.json",type:"string"},Display:props=>{const{data}=props;return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_markdown__WEBPACK_IMPORTED_MODULE_6__.D,{children:data})},Edit:props=>{const{data,onChange}=props,ref=(0,_hooks__WEBPACK_IMPORTED_MODULE_2__.S)();return(0,_hooks__WEBPACK_IMPORTED_MODULE_2__.f)((0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((e=>!("Enter"===e.key&&!e.metaKey&&!e.ctrlKey)),[])),react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_ace__WEBPACK_IMPORTED_MODULE_1__.ZP,{ref,value:data,mode:"markdown",theme:"github",focus:!0,width:"100%",onChange,name:"markdown-editor",editorProps:{$blockScrolling:!0}})}};try{TreemaMarkdownNodeDefinition.displayName="TreemaMarkdownNodeDefinition",TreemaMarkdownNodeDefinition.__docgenInfo={description:"Not included in Treema by default! This is an example of how to incorporate 3rd party libraries.",displayName:"TreemaMarkdownNodeDefinition",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Treema/definitions/markdown.tsx#TreemaMarkdownNodeDefinition"]={docgenInfo:TreemaMarkdownNodeDefinition.__docgenInfo,name:"TreemaMarkdownNodeDefinition",path:"src/Treema/definitions/markdown.tsx#TreemaMarkdownNodeDefinition"})}catch(__react_docgen_typescript_loader_error){}}}]);